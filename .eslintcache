[{"/Users/dtm03/Dev/DesignTokens/dt-react/src/index.js":"1","/Users/dtm03/Dev/DesignTokens/dt-react/src/pages/routes.js":"2","/Users/dtm03/Dev/DesignTokens/dt-react/src/pages/tvshows.js":"3","/Users/dtm03/Dev/DesignTokens/dt-react/src/components/Menu.js":"4","/Users/dtm03/Dev/DesignTokens/dt-react/src/components/MenuButton.tsx":"5","/Users/dtm03/Dev/DesignTokens/dt-react/src/components/TileSwitcher.tsx":"6","/Users/dtm03/Dev/DesignTokens/dt-react/src/components/RailSwitcher.tsx":"7"},{"size":1198,"mtime":1610661808446,"results":"8","hashOfConfig":"9"},{"size":2179,"mtime":1610722099780,"results":"10","hashOfConfig":"9"},{"size":257,"mtime":1610661828787,"results":"11","hashOfConfig":"9"},{"size":273,"mtime":1610722092101,"results":"12","hashOfConfig":"9"},{"size":1664,"mtime":1610718715801,"results":"13","hashOfConfig":"9"},{"size":11654,"mtime":1610720261681,"results":"14","hashOfConfig":"9"},{"size":767,"mtime":1610721975926,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1srcvxm",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dtm03/Dev/DesignTokens/dt-react/src/index.js",["31"],"/Users/dtm03/Dev/DesignTokens/dt-react/src/pages/routes.js",[],"/Users/dtm03/Dev/DesignTokens/dt-react/src/pages/tvshows.js",[],"/Users/dtm03/Dev/DesignTokens/dt-react/src/components/Menu.js",[],"/Users/dtm03/Dev/DesignTokens/dt-react/src/components/MenuButton.tsx",[],"/Users/dtm03/Dev/DesignTokens/dt-react/src/components/TileSwitcher.tsx",["32","33","34","35"],"import React, {ReactNode, useRef} from \"react\";\nimport { useEffect, useState } from \"react\"\n\n// @ts-ignore\n// import { useSwitch } from \"@framer/tishogeorgiev.switch/code\"\n// @ts-ignore\nimport { useFocusable } from \"react-sunbeam\";\nimport {\n    useAnimation,\n    Frame,\n    Stack,\n    addPropertyControls,\n    ControlType,\n} from \"framer\"\n\n// import { createStore } from \"../setter\"\n\n// export const useSwitcherStore = createStore({\n//     tile: \"\",\n//     tileFocused: false,\n//     tilePosX: 0,\n//     tilePosY: 0,\n//     tileWidth: 0,\n//     tileHeight: 0,\n// })\ninterface Props {\n    children: ReactNode;\n    to:string;\n    name:string;\n    ref:string;\n    fontsize:number,\n    image:string,\n    logo:string,\n    text1:string,\n    text2:string,\n    radius:number,\n    progress:number,\n    gradient:string,\n    showLogo:boolean,\n    showTitle:boolean,\n    showSubtitle:boolean,\n    showProgress:boolean,\n    switchName:string,\n    scale:number,\n    onKeyPress:Event,\n    onTap:Event,\n    focusKey:number,\n    width:number,\n    height:number,\n  }\nexport default function TileSwitcher({children, ...props }: Props) {\n    // const {\n    //     logo,\n    //     text1,\n    //     text2,\n    //     radius,\n    //     progress,\n    //     gradient,\n    //     showLogo,\n    //     showTitle,\n    //     showSubtitle,\n    //     showProgress,\n    //     switchName,\n    //     scale,\n    //     onKeyPress,\n    //     onTap,\n    //     focusKey,\n    //     ...rest\n    // } = props\n    const ref = useRef<HTMLDivElement>(null)\n    const controls = useAnimation()\n    const controls2 = useAnimation()\n    const controls3 = useAnimation()\n    // const switchControls = useSwitch()\n    // const [storeSwitcher, setSwitcherStore] = useSwitcherStore()\n    const [stateProgress, setProgress] = useState(props.showProgress)\n\n    // const transition = {\n    //     yoyo: 1,\n    //     duration: 0.3,\n    //     type: \"spring\",\n    //     damping: 40,\n    //     stiffness: 300,\n    // }\n    const transition2 = {\n        duration: 0.35,\n        type: \"spring\",\n        damping: 60,\n        stiffness: 400,\n    }\n    useEffect(function () {\n        if (props.progress && props.progress !== 0) {\n            console.log(\"Progress:\" + props.progress)\n            setProgress(true)\n            console.log(\"Progress:\" + props.showProgress)\n        }\n    }, [])\n    \n    const { focused } = useFocusable({\n        elementRef: ref,\n        // onKeyPress: (event) => {\n        //     if (event.key === \"Enter\") {\n        //         let childname = children[0]?.props.name\n        //         childname &&\n        //             switchControls.setSwitchState(switchName, childname)\n        //         console.log(\"KeyPressed: \" + childname)\n        //         controls.start({\n        //             scale: 0.9,\n        //             transition: transition,\n        //         })\n\n        //         event.stopPropagation()\n        //     }\n        // },\n        onFocus: () => {\n            // let tileParameters = ref.current.getBoundingClientRect()\n\n            controls.start({\n                scale: 1.08,\n                boxShadow: \"16px 16px 20px 0px rgba(0, 0, 0, 0.12)\",\n                opacity: 1,\n                transition: transition2,\n            })\n            controls2.start({\n                opacity: 1,\n            })\n            controls3.start({\n                opacity: 1,\n                transition: transition2,\n            })\n            // setSwitcherStore({\n            //     tile: focusKey,\n            //     tileFocused: true,\n            //     tilePosX: tileParameters.x,\n            //     tilePosY: tileParameters.y,\n            //     tileWidth: tileParameters.width,\n            //     tileHeight: tileParameters.height,\n            // })\n            // console.log(`${storeSwitcher.tile} is Focused`)\n        },\n        onBlur: () => {\n            controls.start({\n                scale: 1,\n                boxShadow: \"4px 4px 8px 0px rgba(0, 0, 0, 0.12)\",\n                transition: transition2,\n                // opacity: 0.85,\n            })\n            controls2.start({\n                opacity: 0.5,\n                transition: transition2,\n            })\n            controls3.start({\n                opacity: 0.5,\n                transition: transition2,\n            })\n            // setSwitcherStore({ tileFocused: false })\n            // console.log(`${storeSwitcher.tile} is Blured`)\n        },\n    })\n\n    return (\n        <Frame\n            ref={ref}\n            width={props.width}\n            height={props.height}\n            backgroundColor={\"#000\"}\n            borderRadius={props.radius}\n            overflow=\"hidden\"\n            animate={controls}\n            // onKeyPress={onKeyPress}\n            // onTap={props.onTap}\n            style={{\n                opacity: 1,\n                boxShadow: \"4px 4px 8px 0px rgba(0, 0, 0, 0.12)\",\n            }}\n        >\n            <Frame\n                backgroundColor={\"transparent\"}\n                width={\"100%\"}\n                height={\"100%\"}\n                animate={controls3}\n                image={props.image}\n                style={{\n                    opacity: 0.5,\n                }}\n            />\n            <Frame\n                backgroundColor={\"transparent\"}\n                width={\"100%\"}\n                height={\"100%\"}\n                image={props.gradient}\n                style={{\n                    opacity: 1,\n                }}\n            />\n            <Frame\n                width={props.width}\n                height={props.height}\n                borderRadius={props.radius}\n                overflow=\"hidden\"\n                animate={controls2}\n                backgroundColor={\"transparent\"}\n                style={{\n                    opacity: 0.5,\n                    border: 1,\n                    borderImageWidth: 1,\n                    borderStyle: \"solid\",\n                    borderImageSlice: 1,\n                    borderImageSource:\n                        \"radial-gradient(100% 100% at 100% 0%, rgba(255, 255, 255, 0.36) 0%, rgba(255, 255, 255, 0.15) 100%)\",\n                }}\n            />\n\n            <Frame\n                backgroundColor={\"transparent\"}\n                width={\"100%\"}\n                height={\"100%\"}\n                borderRadius={props.radius}\n                animate={controls2}\n                image={props.gradient}\n                style={{\n                    opacity: 0.5,\n                    border: 1,\n                    borderImageWidth: 1,\n                    borderStyle: \"solid\",\n                    borderImageSlice: 1,\n                    borderImageSource:\n                        \"radial-gradient(400% 100% at 100% 0%, rgba(255, 255, 255, 0.26) 0%, rgba(255, 255, 255, 0.15) 100%)\",\n                }}\n            />\n            <Stack\n                distribution=\"end\"\n                alignment=\"start\"\n                animate={controls2}\n                width=\"100%\"\n                height=\"100%\"\n                style={{\n                    opacity: 0.5,\n                    paddingLeft: 24,\n                    paddingRight: 24,\n                    paddingBottom: 12,\n                    justifyItems: \"end\",\n                    color: \"#fff\",\n                    fontFamily: \"Sky Text Medium\",\n                    fontSize: props.fontsize,\n                }}\n            >\n                <Frame\n                    image={props.logo}\n                    width={365}\n                    height={75}\n                    visible={props.showLogo}\n                    left={0}\n                    style={{ backgroundColor: \"transparent\" }}\n                />\n\n                <Frame\n                    width=\"100%\"\n                    height=\"auto\"\n                    visible={props.showTitle}\n                    style={{\n                        alignItems: \"start\",\n                        justifyContent: \"start\",\n                        background: \"transparent\",\n                        color: \"#fff\",\n                        fontFamily: \"Sky Text Medium\",\n                        fontSize: 36,\n                        textAlign: \"left\",\n                    }}\n                >\n                    {props.text1}\n                </Frame>\n                <Frame\n                    width=\"100%\"\n                    height=\"auto\"\n                    visible={props.showSubtitle}\n                    style={{\n                        justifyContent: \"start\",\n                        background: \"transparent\",\n                        color: \"#fff\",\n                        fontFamily: \"Sky Text \",\n                        fontSize: 28,\n                        textAlign: \"left\",\n                    }}\n                >\n                    {props.text2}\n                </Frame>\n                <Frame\n                    width={\"100%\"}\n                    height={6}\n                    visible={stateProgress}\n                    backgroundColor={\"transparent\"}\n                >\n                    <Frame\n                        width={\"100%\"}\n                        height={6}\n                        borderRadius={3}\n                        backgroundColor={\"rgba(255,255,255,0.1)\"}\n                    ></Frame>\n                    <Frame\n                        width={props.progress + \"%\"}\n                        height={6}\n                        borderRadius={3}\n                        backgroundColor={\"rgb(0, 135, 255)\"}\n                    ></Frame>\n                </Frame>\n            </Stack>\n        </Frame>\n    )\n}\n\nTileSwitcher.defaultProps = {\n    height: 315,\n    width: 560,\n    gradient: \"https://i.imgur.com/J9BHehk.png\",\n    showLogo: true,\n    showTitle: true,\n    showSubtitle: true,\n    showProgress: false,\n    text1: \"Programme Title\",\n    text2: \"Subtitle/Tag/Subline\",\n    radius: 10,\n    switchName: \"sharedSwitch\",\n}\n\n// addPropertyControls(TileSwitcher, {\n//     logo: {\n//         title: \"Channel Logo\",\n//         type: ControlType.Image,\n//     },\n\n//     text1: {\n//         title: \"Title\",\n//         type: ControlType.String,\n//         defaultValue: \"Programme Title\",\n//     },\n//     text2: {\n//         title: \"Subline\",\n//         type: ControlType.String,\n//         defaultValue: \"Subtitle/Tag/Subline\",\n//     },\n//     image: {\n//         title: \"Tile Image\",\n//         type: ControlType.Image,\n//     },\n//     radius: {\n//         title: \"Radius\",\n//         type: ControlType.Number,\n//         defaultValue: 6,\n//     },\n//     showLogo: {\n//         title: \"Show Title\",\n//         type: ControlType.Boolean,\n//         defaultValue: true,\n//     },\n//     showTitle: {\n//         title: \"Show Title\",\n//         type: ControlType.Boolean,\n//         defaultValue: true,\n//     },\n//     showSubtitle: {\n//         title: \"Show Subtitle\",\n//         type: ControlType.Boolean,\n//         defaultValue: true,\n//     },\n//     showProgress: {\n//         title: \"Show Progres\",\n//         type: ControlType.Boolean,\n//         defaultValue: true,\n//     },\n//     progress: {\n//         title: \"Progress\",\n//         type: ControlType.Number,\n//     },\n//     switchName: {\n//         title: \"Switch Name\",\n//         type: ControlType.String,\n//         defaultValue: \"sharedSwitch\",\n//     },\n//     children: {\n//         title: \"On Enter\",\n//         type: ControlType.ComponentInstance,\n//     },\n//     focusKey: {\n//         type: ControlType.String,\n//         defaultValue: \"\",\n//     },\n//     onKeyPress: {\n//         type: ControlType.EventHandler,\n//     },\n//     onFocus: {\n//         type: ControlType.EventHandler,\n//     },\n//     onTap: {\n//         type: ControlType.EventHandler,\n//     },\n// })\n","/Users/dtm03/Dev/DesignTokens/dt-react/src/components/RailSwitcher.tsx",["36","37","38"],{"ruleId":"39","severity":1,"message":"40","line":15,"column":3,"nodeType":"41","messageId":"42","endLine":31,"endColumn":4},{"ruleId":"43","severity":1,"message":"44","line":12,"column":5,"nodeType":"45","messageId":"46","endLine":12,"endColumn":24},{"ruleId":"43","severity":1,"message":"47","line":13,"column":5,"nodeType":"45","messageId":"46","endLine":13,"endColumn":16},{"ruleId":"48","severity":1,"message":"49","line":97,"column":8,"nodeType":"50","endLine":97,"endColumn":10,"suggestions":"51"},{"ruleId":"43","severity":1,"message":"52","line":99,"column":13,"nodeType":"45","messageId":"46","endLine":99,"endColumn":20},{"ruleId":"43","severity":1,"message":"53","line":3,"column":3,"nodeType":"45","messageId":"46","endLine":3,"endColumn":15},{"ruleId":"43","severity":1,"message":"44","line":6,"column":3,"nodeType":"45","messageId":"46","endLine":6,"endColumn":22},{"ruleId":"43","severity":1,"message":"47","line":7,"column":3,"nodeType":"45","messageId":"46","endLine":7,"endColumn":14},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","@typescript-eslint/no-unused-vars","'addPropertyControls' is defined but never used.","Identifier","unusedVar","'ControlType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.progress' and 'props.showProgress'. Either include them or remove the dependency array.","ArrayExpression",["54"],"'focused' is assigned a value but never used.","'useAnimation' is defined but never used.",{"desc":"55","fix":"56"},"Update the dependencies array to be: [props.progress, props.showProgress]",{"range":"57","text":"58"},[2342,2344],"[props.progress, props.showProgress]"]